@model VientVendreMVC.Areas.User.Models.ProductViewModel
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet">
<link href="~/Content/css/fileinput.min.css" media="all" rel="stylesheet" type="text/css" />
<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>

<!-- canvas-to-blob.min.js is only needed if you wish to resize images before upload.
     This must be loaded before fileinput.min.js -->
<script src="~/Scripts/js/plugins/canvas-to-blob.min.js" type="text/javascript"></script>
<script src="~/Scripts/js/fileinput.min.js"></script>
<!-- bootstrap.js below is only needed if you wish to the feature of viewing details
     of text file preview via modal dialog -->
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js" type="text/javascript"></script>
<!-- optionally if you need translation for your language then include
    locale file as mentioned below -->
<script src="~/Scripts/js/fileinput_locale_fr.js"></script>




@{
    ViewBag.Title = "CreateProduct";
}

@if (ViewBag.NbreProduct != null)
{
    <h2>CreateProduct @ViewBag.NbreProduct</h2>
}

<div class="container">

    @using (Html.BeginForm())
            {
        @Html.AntiForgeryToken()


        <div class="form-horizontal">
            <h4>ProductViewModel</h4>
            <div class="row">
                <div class="col-lg-6">
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                    <div class="form-group">
                        @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ProductPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ProductPrice, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ProductPrice, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>





                        <ul>

                            @{
                                int i = 1;
                                foreach (var cat in Model.Categories)
                                {
                            <li>
                                <div class="checkbox">
                                    <label for="@cat"><input type="checkbox" name="@i" />@cat</label>
                                </div>
                            </li>
                                    i++;
                                }
                            }

                        </ul>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                @if (TempData["NbreProduct"] != null)
                                {
                                    if (int.Parse(TempData["NbreProduct"].ToString()) > 1)
                                    {
                                        TempData["NbreProduct"] = TempData["NbreProduct"];
                                <input type="submit" value="Next Product" class="btn btn-default" />
                                    }
                                    else
                                    {
                                        TempData["NbreProduct"] = TempData["NbreProduct"];
                                <input type="submit" value="Finish" class="btn btn-default" />
                                    }


                                }


                            </div>
                        </div>
                    
                </div>
                <div class="col-lg-6">
                    <form method="post" enctype="multipart/form-data">
                        <input id="input-705" name="kartik-input-705[]" type="file" multiple class="file-loading">
                    </form>
                </div>
            </div>
        </div>

            }

            </div>


        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>



<script>
    var $input = $("#input-705");
    $input.fileinput({
        uploadUrl: "http://localhost:57430/User/AddOrEditMyAnnonce/Upload/1", // server upload action
        uploadAsync: false,
        showUpload: false, // hide upload button
        showRemove: false, // hide remove button
        minFileCount: 1,
        maxFileCount: 5
    }).on("filebatchselected", function (event, files) {
        // trigger upload method immediately after files are selected
        $input.fileinput("upload");
    });
</script>


